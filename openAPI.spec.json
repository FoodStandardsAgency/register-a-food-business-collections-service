{
  "swagger": "2.0",
  "info": {
    "title": "Register a food business collections",
    "version": "1.0"
  },
  "host": "fsa-rof-gateway.azure-api.net",
  "basePath": "/api/registrations",
  "schemes": ["https"],
  "securityDefinitions": {
    "apiKeyHeader": {
      "type": "apiKey",
      "name": "Ocp-Apim-Subscription-Key",
      "in": "header"
    },
    "apiKeyQuery": {
      "type": "apiKey",
      "name": "subscription-key",
      "in": "query"
    }
  },
  "security": [
    {
      "apiKeyHeader": []
    },
    {
      "apiKeyQuery": []
    }
  ],
  "paths": {
    "/all": {
      "get": {
        "description": "Returns all registrations ",
        "operationId": "collect-all-registrations",
        "summary": "Collect ALL registrations",
        "parameters": [
          {
            "name": "newForLA",
            "in": "query",
            "description": "Flag to return new registrations for Local Authority (default false)",
            "type": "boolean",
            "enum": ["true", "false"]
          },
          {
            "name": "newForUV",
            "in": "query",
            "description": "Flag to return new registrations for Unified View (default true)",
            "type": "boolean",
            "enum": ["true", "false"]
          },
          {
            "name": "before",
            "in": "query",
            "description": "Return registrations before ISO formatted date time (UTC)",
            "required": false,
            "type": "string"
          },
          {
            "name": "double-mode",
            "in": "header",
            "description": "Optional string to run the application against an in memory double rather than the real DB",
            "type": "string",
            "enum": ["success", "fail", "single", "update", "updateUnified", "updateUnifiedMany"]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ArrayOfRegistrations"
            }
          },
          "400": {
            "description": "Bad request, invalid options"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "put": {
        "description": "Updates all registrations as Unified View Collected",
        "operationId": "update-all-registrations-unified-view",
        "summary": "Updates ALL registrations",
        "parameters": [
          {
            "name": "newForLA",
            "in": "query",
            "description": "Flag to mark as collected new registrations for Local Authority (default false)",
            "required": false,
            "type": "boolean",
            "enum": ["true", "false"]
          },
          {
            "name": "newForUV",
            "in": "query",
            "description": "Flag to mark as collected new registrations for Unified View (default true)",
            "required": false,
            "type": "boolean",
            "enum": ["true", "false"]
          },
          {
            "name": "before",
            "in": "query",
            "description": "Mark as collected registrations before ISO formatted date time (UTC)",
            "required": false,
            "type": "string"
          },
          {
            "name": "double-mode",
            "in": "header",
            "description": "Optional string to run the application against an in memory double rather than the real DB",
            "type": "string",
            "enum": ["success", "fail", "single", "update", "updateUnified", "updateUnifiedMany"]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ArrayOfUpdates"
            }
          },
          "400": {
            "description": "Bad request, invalid options"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/all/{fsa_rn}": {
      "put": {
        "description": "Updates single registration as Unified View Collected",
        "operationId": "update-single-registrations-unified-view",
        "summary": "Updates single registration",
        "parameters": [
          {
            "name": "fsa_rn",
            "in": "path",
            "description": "The reference number for the registration to be retrieved",
            "required": true,
            "type": "string"
          },
          {
            "name": "collected",
            "in": "body",
            "description": "The flag to mark the registration with",
            "schema": {
              "type": "object",
              "properties": {
                "collected": {
                  "type": "boolean"
                }
              }
            }
          },
          {
            "name": "double-mode",
            "in": "header",
            "description": "Optional string to run the application against an in memory double rather than the real DB",
            "type": "string",
            "enum": ["success", "fail", "single", "update", "updateUnified", "updateUnifiedMany"]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/unifiedUpdate"
            }
          },
          "400": {
            "description": "Bad request, invalid options"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/{lc}": {
      "get": {
        "description": "Returns all registrations for the given council.",
        "operationId": "collect-all-registrations-for-council",
        "summary": "Collect ALL registrations for council",
        "parameters": [
          {
            "name": "lc",
            "in": "path",
            "description": "The council name",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Extra fields to return as part of the response",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "name": "new",
            "in": "query",
            "description": "Flag to return only new registrations",
            "type": "boolean",
            "enum": ["true", "false"]
          },
          {
            "name": "double-mode",
            "in": "header",
            "description": "Optional string to run the application against an in memory double rather than the real DB",
            "type": "string",
            "enum": ["success", "fail", "single", "update", "updateUnified", "updateUnifiedMany"]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ArrayOfRegistrations"
            }
          },
          "400": {
            "description": "Bad request, invalid options"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/{lc}/{fsa_rn}": {
      "get": {
        "description": "Get a single registrations in full",
        "parameters": [
          {
            "name": "lc",
            "in": "path",
            "description": "The council name",
            "required": true,
            "type": "string"
          },
          {
            "name": "fsa_rn",
            "in": "path",
            "description": "The reference number for the registration to be retrieved",
            "required": true,
            "type": "string"
          },
          {
            "name": "double-mode",
            "in": "header",
            "description": "Optional string to run the application against an in memory double rather than the real DB",
            "type": "string",
            "enum": ["success", "fail", "single", "update", "updateUnified", "updateUnifiedMany"]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Registration"
            }
          },
          "400": {
            "description": "Bad request, invalid options"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "put": {
        "description": "Update a single registrations with collected",
        "parameters": [
          {
            "name": "lc",
            "in": "path",
            "description": "The council name",
            "required": true,
            "type": "string"
          },
          {
            "name": "fsa_rn",
            "in": "path",
            "description": "The reference number for the registration to be retrieved",
            "required": true,
            "type": "string"
          },
          {
            "name": "double-mode",
            "in": "header",
            "description": "Optional string to run the application against an in memory double rather than the real DB",
            "type": "string",
            "enum": ["success", "fail", "single", "update", "updateUnified", "updateUnifiedMany"]
          },
          {
            "name": "collected",
            "in": "body",
            "description": "The flag to mark the registration with",
            "schema": {
              "type": "object",
              "properties": {
                "collected": {
                  "type": "boolean"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "fsa_rn": {
                  "type": "string"
                },
                "collected": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad request, invalid options"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    }
  },
  "definitions": {
    "ArrayOfUpdates": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/unifiedUpdate"
      }
    },
    "unifiedUpdate": {
      "type":"object",
      "properties": {
        "fsa_rn": {
          "type": "string"
        },
        "unified_view_collected": {
          "type": "boolean"
        }
      }
    },
    "ArrayOfRegistrations": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Registration"
      }
    },
    "Registration": {
      "type": "object",
      "properties": {
        "fsa_rn": {
          "$ref": "#/definitions/fsa_rn"
        },
        "council": {
          "$ref": "#/definitions/council"
        },
        "collected": {
          "$ref": "#/definitions/collected"
        },
        "collected_at": {
          "$ref": "#/definitions/collected_at"
        },
        "establishment": {
          "$ref": "#/definitions/Establishment"
        },
        "metadata": {
          "$ref": "#/definitions/Metadata"
        }
      }
    },
    "fsa_rn": {
      "type": "string",
      "maximum": 20,
      "minimum": 20,
      "description": "The unique reference number to identify this registration"
    },
    "council": {
      "type": "string",
      "description": "The local council that the registration belongs to"
    },
    "collected": {
      "type": "boolean",
      "description": "Flag indicating whether this registration has been collected by the council or not"
    },
    "collected_at": {
      "type": "string",
      "description": "The date and time that the registration was collected"
    },
    "Establishment": {
      "type": "object",
      "properties": {
        "establishment_details": {
          "$ref": "#/definitions/EstablishmentDetails"
        },
        "operator": {
          "$ref": "#/definitions/Operator"
        },
        "premise": {
          "$ref": "#/definitions/Premise"
        },
        "activities": {
          "$ref": "#/definitions/Activities"
        }
      }
    },
    "EstablishmentDetails": {
      "type": "object",
      "required": [
        "establishment_trading_name",
        "establishment_primary_number",
        "establishment_email",
        "establishment_opening_date"
      ],
      "properties": {
        "establishment_trading_name": {
          "type": "string",
          "description": "ASCII string",
          "maximum": 255
        },
        "establishment_primary_number": {
          "type": "string",
          "minimum": 5,
          "maximum": 20,
          "description": "Numeric string. Blank spaces and + allowed"
        },
        "establishment_secondary_number": {
          "type": "string",
          "minimum": 5,
          "maximum": 20,
          "description": "Numeric string. Blank spaces and + allowed"
        },
        "establishment_email": {
          "type": "string",
          "maximum": 255,
          "description": "Uses [npm Validator](https://www.npmjs.com/package/validator) isEmail"
        },
        "establishment_opening_date": {
          "type": "string",
          "description": "Uses YYYY-MM-DD [npm Validator](https://www.npmjs.com/package/validator) isISO8601"
        }
      }
    },
    "Operator": {
      "type": "object",
      "required": [
        "operator_first_line",
        "operator_primary_number",
        "operator_secondary_number",
        "operator_email",
        "operator_type",
        "operator_postcode"
      ],
      "properties": {
        "operator_first_name": {
          "type": "string",
          "description": "ASCII string - Required if operator_type is ''Sole trader'', ''Partnership'', or ''A person (registered by a representative)''",
          "maximum": 255
        },
        "operator_last_name": {
          "type": "string",
          "description": "ASCII string - required if operator_type is ''Sole trader'', ''Partnership'', or ''A person (registered by a representative)''",
          "maximum": 255
        },
        "partners": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Partner"
          }
        },
        "operator_postcode": {
          "type": "string",
          "description": "Uses [npm Validator](https://www.npmjs.com/package/validator) isPostalCode (GB)"
        },
        "operator_uprn": {
          "type": "string",
          "maximum": 12,
          "description": "Unique Property Reference Number"
        },
        "operator_first_line": {
          "type": "string",
          "description": "ASCII string",
          "maximum": 255
        },
        "operator_street": {
          "type": "string",
          "description": "ASCII string",
          "maximum": 255
        },
        "operator_town": {
          "type": "string",
          "description": "ASCII string",
          "maximum": 255
        },
        "operator_primary_number": {
          "type": "string",
          "minimum": 5,
          "maximum": 20,
          "description": "Numeric string. Blank spaces and + allowed"
        },
        "operator_secondary_number": {
          "type": "string",
          "minimum": 5,
          "maximum": 20,
          "description": "Numeric string. Blank spaces and + allowed"
        },
        "operator_email": {
          "type": "string",
          "maximum": 255,
          "description": "Uses [npm Validator](https://www.npmjs.com/package/validator) isEmail"
        },
        "contact_representative_name": {
          "type": "string",
          "description": "ASCII string - requried if operator_type is 'A company (registered by a representative)' or 'A charity (registered by a representative)'",
          "maximum": 255
        },
        "contact_representative_role": {
          "type": "string",
          "description": "ASCII string - Required if operator_type is 'A company (registered by a representative)' or 'A charity (registered by a representative)'",
          "maximum": 255
        },
        "contact_representative_number": {
          "type": "string",
          "description": "ASCII string - Required if operator_type is 'A company (registered by a representative)' or 'A charity (registered by a representative)'",
          "maximum": 255
        },
        "contact_representative_email": {
          "type": "string",
          "maximum": 255,
          "description": "Uses [npm Validator](https://www.npmjs.com/package/validator) isEmail - Required if operator_type is 'A company (registered by a representative)' or 'A charity (registered by a representative)'"
        },
        "operator_type": {
          "type": "string",
          "description": "Possible values: 'Sole trader', 'Partnership', 'A person (registered by a representative)' 'A company (registered by a representative)' or 'A charity (registered by a representative)'"
        },
        "operator_company_name": {
          "type": "string",
          "maximum": 50,
          "description": "Required if operator_type is 'A company (registered by a representative)'"
        },
        "operator_company_house_number": {
          "type": "string",
          "maximum": 8,
          "minimum": 8,
          "description": "Uses [npm Validator](https://www.npmjs.com/package/validator) isAlphanumeric (GB), first two characters can be letters - Required if operator_type is 'A company (registered by a representative)'"
        },
        "operator_charity_name": {
          "type": "string",
          "maximum": 50,
          "description": "Required if operator_type is 'A charity (registered by a representative)'"
        },
        "operator_charity_number": {
          "type": "string",
          "maximum": 8,
          "minimum": 6,
          "description": "Uses [npm Validator](https://www.npmjs.com/package/validator) isAlphanumeric (GB), allows ''-'' -  Required if operator_type is 'A charity (registered by a representative)'"
        }
      }
    },
    "Partner": {
      "type": "object",
      "required": ["partner_name", "partner_is_primary_contact"],
      "properties": {
        "partner_name": {
          "type": "string",
          "description": "ASCII string"
        },
        "partner_is_primary_contact": {
          "type": "boolean",
          "description": "Flag indicating whether the partner is the primary contact"
        }
      }
    },
    "Premise": {
      "type": "object",
      "required": [
        "establishment_postcode",
        "establishment_first_line",
        "establishment_type"
      ],
      "properties": {
        "establishment_postcode": {
          "type": "string",
          "description": "Uses [npm Validator](https://www.npmjs.com/package/validator) isPostalCode (GB)"
        },
        "establishment_uprn": {
          "type": "string",
          "maximum": 12,
          "description": "Unique Property Reference Number"
        },
        "establishment_first_line": {
          "type": "string",
          "description": "ASCII string",
          "maximum": 255
        },
        "establishment_street": {
          "type": "string",
          "description": "ASCII string",
          "maximum": 255
        },
        "establishment_town": {
          "type": "string",
          "description": "ASCII string",
          "maximum": 255
        },
        "establishment_type": {
          "type": "string",
          "description": "Possible values: 'Place of business or commercial premises', 'Mobile or moveable premises', 'Home or domestic premises'"
        }
      }
    },
    "Activities": {
      "type": "object",
      "required": [
        "customer_type",
        "business_type",
        "import_export_activities"
      ],
      "properties": {
        "customer_type": {
          "type": "string",
          "description": "Possible values: 'Other businesses', 'End consumer', 'End consumer and other businesses'"
        },
        "business_type": {
          "type": "string",
          "description": "Predetermined values, see separate document for full business type list"
        },
        "business_type_search_term": {
          "type": "string"
        },
        "import_export_activities": {
          "type": "string",
          "description": "Possible values: 'Directly import', 'Directly export', 'Directly import and export', 'None'"
        },
        "business_other_details": {
          "type": "string",
          "maximum": 1500
        },
        "opening_days_irregular": {
          "type": "string",
          "maximum": 1500
        },
        "opening_day_monday": {
          "type": "boolean"
        },
        "opening_day_tuesday": {
          "type": "boolean"
        },
        "opening_day_wednesday": {
          "type": "boolean"
        },
        "opening_day_thursday": {
          "type": "boolean"
        },
        "opening_day_friday": {
          "type": "boolean"
        },
        "opening_day_saturday": {
          "type": "boolean"
        },
        "opening_day_sunday": {
          "type": "boolean"
        }
      }
    },
    "Metadata": {
      "type": "object",
      "properties": {
        "declaration1": {
          "type": "string",
          "description": "I declare that the information I have given on this form is correct and complete to the best of my knowledge and belief."
        },
        "declaration2": {
          "type": "string",
          "description": "The operator will notify their local council of any significant changes to the business activity, including closure, within 28 days of the change happening."
        },
        "declaration3": {
          "type": "string",
          "description": "The operator understands they are legally responsible for the safety and authenticity of the food being produced or served at this establishment."
        }
      }
    }
  },
  "tags": []
}
