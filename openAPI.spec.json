{
  "swagger": "2.0",
  "info": {
    "title": "Register a food business collections",
    "version": "1.3"
  },
  "host": "fsa-rof-gateway.azure-api.net",
  "basePath": "/api/registrations",
  "schemes": ["https"],
  "securityDefinitions": {
    "apiKeyHeader": {
      "type": "apiKey",
      "name": "Ocp-Apim-Subscription-Key",
      "in": "header"
    },
    "apiKeyQuery": {
      "type": "apiKey",
      "name": "subscription-key",
      "in": "query"
    }
  },
  "security": [
    {
      "apiKeyHeader": []
    },
    {
      "apiKeyQuery": []
    }
  ],
  "paths": {
    "/unified": {
      "get": {
        "description": "Returns registrations from all local authorities for Unified View. Results are filtered according to the supplied date/time range.",
        "operationId": "get-registrations-for-unified-view",
        "summary": "Get registrations for Unified View.",
        "parameters": [
          {
            "name": "after",
            "in": "query",
            "description": "Filter registrations to those created/updated after an ISO formatted UTC date-time e.g. 2019-04-29T16:01:12Z.",
            "required": true,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "before",
            "in": "query",
            "description": "Filter registrations to those created/updated before an ISO formatted UTC date-time e.g. 2019-04-30T16:01:12Z.",
            "required": true,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "double-mode",
            "in": "header",
            "description": "Return a hard-coded test result according to the value specified instead of querying the database.",
            "type": "string",
            "enum": ["success", "fail", "single", "update"]
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "schema": {
              "$ref": "#/definitions/ArrayOfRegistrations"
            }
          },
          "400": {
            "description": "Bad request, invalid options."
          },
          "404": {
            "description": "Resource not found."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/{lc}": {
      "get": {
        "description": "Returns registrations from the supplied local authority. By default, results are filtered to exclude data marked as collected.",
        "operationId": "get-registrations-for-local-authority",
        "summary": "Get registrations for local authority.",
        "parameters": [
          {
            "name": "lc",
            "in": "path",
            "description": "The local authority name.",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Extra fields to return as part of the response.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "name": "new",
            "in": "query",
            "description": "Filter registrations to those not yet marked as collected.",
            "type": "boolean",
            "default": "true",
            "enum": ["true", "false"]
          },
          {
            "name": "double-mode",
            "in": "header",
            "description": "Return a hard-coded test result according to the value specified instead of querying the database.",
            "type": "string",
            "enum": ["success", "fail", "single", "update"]
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "schema": {
              "$ref": "#/definitions/ArrayOfRegistrations"
            }
          },
          "400": {
            "description": "Bad request, invalid options."
          },
          "404": {
            "description": "Resource not found."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/{lc}/{fsa_rn}": {
      "get": {
        "description": "Returns a single registration in full from the supplied reference number.",
        "operationId": "get-single-registration-for-local-authority",
        "summary": "Get a single registration in full.",
        "parameters": [
          {
            "name": "lc",
            "in": "path",
            "description": "The local authority name.",
            "required": true,
            "type": "string"
          },
          {
            "name": "fsa_rn",
            "in": "path",
            "description": "The reference number of the registration.",
            "required": true,
            "type": "string"
          },
          {
            "name": "double-mode",
            "in": "header",
            "description": "Return a hard-coded test result according to the value specified instead of querying the database.",
            "type": "string",
            "enum": ["success", "fail", "single", "update"]
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "schema": {
              "$ref": "#/definitions/Registration"
            }
          },
          "400": {
            "description": "Bad request, invalid options."
          },
          "404": {
            "description": "Resource not found."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      },
      "put": {
        "description": "Updates a single registration according to the supplied reference number and collection status.",
        "operationId": "update-single-registration-for-local-authority",
        "summary": "Update the collected status of a single registration.",
        "parameters": [
          {
            "name": "lc",
            "in": "path",
            "description": "The local authority name.",
            "required": true,
            "type": "string"
          },
          {
            "name": "fsa_rn",
            "in": "path",
            "description": "The reference number for the registration.",
            "required": true,
            "type": "string"
          },
          {
            "name": "double-mode",
            "in": "header",
            "description": "Return a hard-coded test result according to the value specified instead of querying the database.",
            "type": "string",
            "enum": ["success", "fail", "single", "update"]
          },
          {
            "name": "collected",
            "in": "body",
            "description": "The collection status with which to update the registration.",
            "schema": {
              "type": "object",
              "properties": {
                "collected": {
                  "type": "boolean"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "schema": {
              "type": "object",
              "properties": {
                "fsa_rn": {
                  "type": "string"
                },
                "collected": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad request, invalid options."
          },
          "404": {
            "description": "Resource not found."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    }
  },
  "definitions": {
    "ArrayOfRegistrations": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Registration"
      }
    },
    "Registration": {
      "type": "object",
      "properties": {
        "fsa_rn": {
          "$ref": "#/definitions/fsa_rn"
        },
        "council": {
          "$ref": "#/definitions/council"
        },
        "competent_authority_id": {
          "$ref": "#/definitions/competent_authority_id"
        },
        "local_council_url": {
          "$ref": "#/definitions/local_council_url"
        },
        "collected": {
          "$ref": "#/definitions/collected"
        },
        "collected_at": {
          "$ref": "#/definitions/collected_at"
        },
        "establishment": {
          "$ref": "#/definitions/Establishment"
        },
        "metadata": {
          "$ref": "#/definitions/Metadata"
        }
      }
    },
    "fsa_rn": {
      "type": "string",
      "maximum": 20,
      "minimum": 20,
      "description": "The unique reference number to identify this registration."
    },
    "council": {
      "type": "string",
      "description": "The full name of the local authority."
    },
    "competent_authority_id": {
      "type": "integer",
      "description": "The unique id for the local authority."
    },
    "local_council_url": {
      "type": "string",
      "description": "The unique url for the local authority."
    },
    "collected": {
      "type": "boolean",
      "description": "Flag indicating whether this registration has been collected by the local authority or not."
    },
    "collected_at": {
      "type": "string",
      "description": "The date and time that the registration was collected."
    },
    "Establishment": {
      "type": "object",
      "properties": {
        "establishment_details": {
          "$ref": "#/definitions/EstablishmentDetails"
        },
        "operator": {
          "$ref": "#/definitions/Operator"
        },
        "premise": {
          "$ref": "#/definitions/Premise"
        },
        "activities": {
          "$ref": "#/definitions/Activities"
        }
      }
    },
    "EstablishmentDetails": {
      "type": "object",
      "required": [
        "establishment_trading_name",
        "establishment_primary_number",
        "establishment_email",
        "establishment_opening_date"
      ],
      "properties": {
        "establishment_trading_name": {
          "type": "string",
          "description": "ASCII string.",
          "maximum": 255
        },
        "establishment_primary_number": {
          "type": "string",
          "minimum": 5,
          "maximum": 20,
          "description": "Numeric string. Blank spaces and + allowed."
        },
        "establishment_secondary_number": {
          "type": "string",
          "minimum": 5,
          "maximum": 20,
          "description": "Numeric string. Blank spaces and + allowed."
        },
        "establishment_email": {
          "type": "string",
          "maximum": 255,
          "description": "Uses [npm Validator](https://www.npmjs.com/package/validator) isEmail."
        },
        "establishment_opening_date": {
          "type": "string",
          "description": "Uses YYYY-MM-DD [npm Validator](https://www.npmjs.com/package/validator) isISO8601."
        }
      }
    },
    "Operator": {
      "type": "object",
      "required": [
        "operator_first_line",
        "operator_address_line_1",
        "operator_primary_number",
        "operator_secondary_number",
        "operator_email",
        "operator_type",
        "operator_town",
        "operator_postcode"
      ],
      "properties": {
        "operator_first_name": {
          "type": "string",
          "description": "ASCII string - Required if operator_type is Sole trader', 'Partnership', or A person (registered by a representative)'.",
          "maximum": 255
        },
        "operator_last_name": {
          "type": "string",
          "description": "ASCII string - required if operator_type is 'Sole trader', 'Partnership', or A person (registered by a representative)'.",
          "maximum": 255
        },
        "operator_postcode": {
          "type": "string",
          "description": "Uses [npm Validator](https://www.npmjs.com/package/validator) isPostalCode (GB)."
        },
        "operator_uprn": {
          "type": "string",
          "maximum": 12,
          "description": "Unique Property Reference Number."
        },
        "operator_first_line": {
          "type": "string",
          "description": "ASCII string.",
          "maximum": 255
        },
        "operator_street": {
          "type": "string",
          "description": "ASCII string.",
          "maximum": 255
        },
        "operator_dependent_locality": {
          "type": "string",
          "description": "ASCII string.",
          "maximum": 255
        },
        "operator_address_line_1": {
          "type": "string",
          "description": "ASCII string.",
          "maximum": 255
        },
        "operator_address_line_2": {
          "type": "string",
          "description": "ASCII string.",
          "maximum": 255
        },
        "operator_address_line_3": {
          "type": "string",
          "description": "ASCII string.",
          "maximum": 255
        },
        "operator_town": {
          "type": "string",
          "description": "ASCII string.",
          "maximum": 255
        },
        "operator_primary_number": {
          "type": "string",
          "minimum": 5,
          "maximum": 20,
          "description": "Numeric string. Blank spaces and + allowed."
        },
        "operator_secondary_number": {
          "type": "string",
          "minimum": 5,
          "maximum": 20,
          "description": "Numeric string. Blank spaces and + allowed."
        },
        "operator_email": {
          "type": "string",
          "maximum": 255,
          "description": "Uses [npm Validator](https://www.npmjs.com/package/validator) isEmail."
        },
        "contact_representative_name": {
          "type": "string",
          "description": "ASCII string - requried if operator_type is 'A company (registered by a representative)' or 'A charity (registered by a representative)'.",
          "maximum": 255
        },
        "contact_representative_role": {
          "type": "string",
          "description": "ASCII string - Required if operator_type is 'A company (registered by a representative)' or 'A charity (registered by a representative)'.",
          "maximum": 255
        },
        "contact_representative_number": {
          "type": "string",
          "description": "ASCII string - Required if operator_type is 'A company (registered by a representative)' or 'A charity (registered by a representative)'.",
          "maximum": 255
        },
        "contact_representative_email": {
          "type": "string",
          "maximum": 255,
          "description": "Uses [npm Validator](https://www.npmjs.com/package/validator) isEmail - Required if operator_type is 'A company (registered by a representative)' or 'A charity (registered by a representative)'."
        },
        "operator_type": {
          "type": "string",
          "description": "Possible values: 'Sole trader', 'Partnership', 'A person (registered by a representative)' 'A company (registered by a representative)' or 'A charity (registered by a representative)'."
        },
        "operator_company_name": {
          "type": "string",
          "maximum": 50,
          "description": "Required if operator_type is 'A company (registered by a representative)'."
        },
        "operator_company_house_number": {
          "type": "string",
          "maximum": 8,
          "minimum": 8,
          "description": "Uses [npm Validator](https://www.npmjs.com/package/validator) isAlphanumeric (GB), first two characters can be letters - Required if operator_type is 'A company (registered by a representative)'."
        },
        "operator_charity_name": {
          "type": "string",
          "maximum": 50,
          "description": "Required if operator_type is 'A charity (registered by a representative)'."
        },
        "operator_charity_number": {
          "type": "string",
          "maximum": 8,
          "minimum": 6,
          "description": "Uses [npm Validator](https://www.npmjs.com/package/validator) isAlphanumeric (GB), allows ''-'' -  Required if operator_type is 'A charity (registered by a representative)'."
        },
        "partners": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Partner"
          }
        }
      }
    },
    "Partner": {
      "type": "object",
      "required": ["partner_name", "partner_is_primary_contact"],
      "properties": {
        "partner_name": {
          "type": "string",
          "description": "ASCII string."
        },
        "partner_is_primary_contact": {
          "type": "boolean",
          "description": "Flag indicating whether the partner is the primary contact."
        }
      }
    },
    "Premise": {
      "type": "object",
      "required": [
        "establishment_postcode",
        "establishment_first_line",
        "establishment_address_line_1",
        "establishment_type"
      ],
      "properties": {
        "establishment_postcode": {
          "type": "string",
          "description": "Uses [npm Validator](https://www.npmjs.com/package/validator) isPostalCode (GB)."
        },
        "establishment_uprn": {
          "type": "string",
          "maximum": 12,
          "description": "Unique Property Reference Number."
        },
        "establishment_first_line": {
          "type": "string",
          "description": "ASCII string.",
          "maximum": 255
        },
        "establishment_street": {
          "type": "string",
          "description": "ASCII string.",
          "maximum": 255
        },
        "establishment_dependent_locality": {
          "type": "string",
          "description": "ASCII string.",
          "maximum": 255
        },
        "establishment_address_line_1": {
          "type": "string",
          "description": "ASCII string.",
          "maximum": 255
        },
        "establishment_address_line_2": {
          "type": "string",
          "description": "ASCII string.",
          "maximum": 255
        },
        "establishment_address_line_3": {
          "type": "string",
          "description": "ASCII string.",
          "maximum": 255
        },
        "establishment_town": {
          "type": "string",
          "description": "ASCII string.",
          "maximum": 255
        },
        "establishment_type": {
          "type": "string",
          "description": "Possible values: 'Place of business or commercial premises', 'Mobile or moveable premises', 'Home or domestic premises'."
        }
      }
    },
    "Activities": {
      "type": "object",
      "required": [
        "customer_type",
        "business_type",
        "import_export_activities",
        "water_supply"
      ],
      "properties": {
        "customer_type": {
          "type": "string",
          "description": "Possible values: 'Other businesses', 'End consumer', 'End consumer and other businesses'."
        },
        "business_type": {
          "type": "string",
          "description": "Predetermined values, see separate document for full business type list."
        },
        "business_type_search_term": {
          "type": "string"
        },
        "import_export_activities": {
          "type": "string",
          "description": "Possible values: 'Directly import', 'Directly export', 'Directly import and export', 'None'."
        },
        "water_supply": {
          "type": "string",
          "description": "Possible values: 'Public', 'Private', 'Public and private'."
        },
        "business_other_details": {
          "type": "string",
          "maximum": 1500
        },
        "opening_days_irregular": {
          "type": "string",
          "maximum": 1500
        },
        "opening_day_monday": {
          "type": "boolean"
        },
        "opening_day_tuesday": {
          "type": "boolean"
        },
        "opening_day_wednesday": {
          "type": "boolean"
        },
        "opening_day_thursday": {
          "type": "boolean"
        },
        "opening_day_friday": {
          "type": "boolean"
        },
        "opening_day_saturday": {
          "type": "boolean"
        },
        "opening_day_sunday": {
          "type": "boolean"
        },
        "opening_hours_monday": {
          "type": "string",
          "maximum": 50
        },
        "opening_hours_tuesday": {
          "type": "string",
          "maximum": 50
        },
        "opening_hours_wednesday": {
          "type": "string",
          "maximum": 50
        },
        "opening_hours_thursday": {
          "type": "string",
          "maximum": 50
        },
        "opening_hours_friday": {
          "type": "string",
          "maximum": 50
        },
        "opening_hours_saturday": {
          "type": "string",
          "maximum": 50
        },
        "opening_hours_sunday": {
          "type": "string",
          "maximum": 50
        }
      }
    },
    "Metadata": {
      "type": "object",
      "properties": {
        "declaration1": {
          "type": "string",
          "description": "I declare that the information I have given on this form is correct and complete to the best of my knowledge and belief."
        },
        "declaration2": {
          "type": "string",
          "description": "The operator will notify their local council of any significant changes to the business activity, including closure, within 28 days of the change happening."
        },
        "declaration3": {
          "type": "string",
          "description": "The operator understands they are legally responsible for the safety and authenticity of the food being produced or served at this establishment."
        }
      }
    }
  },
  "tags": []
}
